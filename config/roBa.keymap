#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&sl { release-after-ms = <250>; }; // ダブルクリックに必要な時間を設定
/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        macros {
            mkp_exit_AML: mkp_exit_AML {
                compatible = "zmk,behavior-macro-one-param";
                #binding-cells = <1>;
                bindings =
                    <&macro_press>,
                    <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                    <&macro_pause_for_release>,
                    <&macro_release>,
                    <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                    <&macro_tap>,
                    <&sl MOUSE>;

                label = "MKP_EXIT_AML";
            };
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q              &kp W                 &kp E                 &kp R                        &kp T                                                               &kp Y                   &kp U  &kp I      &kp O    &kp P
&kp A              &kp S                 &kp D                 &kp F                        &kp G                   &to_layer_0 LS(LG(S))            &kp MINUS  &kp H                   &kp J  &kp K      &kp L    &kp RSHFT
&kp Z              &kp X                 &kp C                 &kp V                        &kp B                   &kp APOS                         &kp EQUAL  &kp N                   &kp M  &kp COMMA  &kp DOT  &kp SEMI
&to_layer_0 LCTRL  &to_layer_0 LEFT_WIN  &to_layer_0 LEFT_ALT  &lt_to_layer_0 6 LANGUAGE_2  &lt_to_layer_0 2 SPACE  &lt_to_layer_0 1 LANGUAGE_1      &kp BSPC   &lt_to_layer_0 2 ENTER                             &kp FSLH
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&to_layer_0 ESC   &to_layer_0 F9  &to_layer_0 F10    &to_layer_0 F11  &to_layer_0 F12                        &trans    &to_layer_0 LEFT  &to_layer_0 UP_ARROW    &to_layer_0 RIGHT_ARROW  &trans
&to_layer_0 HOME  &to_layer_0 F5  &to_layer_0 F6     &to_layer_0 F7   &kp F8           &trans      &trans    &trans    &mkp MB1          &to_layer_0 DOWN_ARROW  &mkp MB2                 &mkp MCLK
&to_layer_0 END   &to_layer_0 F1  &to_layer_0 F2     &to_layer_0 F3   &to_layer_0 F4   &trans      &trans    &trans    &trans            &kp LS(LEFT_BRACKET)    &kp LS(RIGHT_BRACKET)    &trans
&trans            &trans          &lt 3 RIGHT_SHIFT  &trans           &trans           &trans      &mkp MB4  &mkp MB5                                                                     &trans
            >;
        };

        NUM {
            bindings = <
&to_layer_0 TAB  &kp N7  &kp N8  &kp N9  &kp N0                           &kp K_COPY  &kp LEFT   &kp UP      &kp RIGHT  &kp K_PASTE
&trans           &kp N4  &kp N5  &kp N6  &kp SEMI   &trans      &trans    &kp GRAVE   &mkp MB1   &lt 5 DOWN  &mkp MB2   &mkp MB3
&trans           &kp N1  &kp N2  &kp N3  &kp MINUS  &trans      &trans    &kp APOS    &kp EQUAL  &kp LBKT    &kp RBKT   &kp GRAVE
&trans           &trans  &trans  &trans  &trans     &trans      &mkp MB4  &mkp MB5                                      &kp RSHFT
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &none   &none   &none   &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };

        MOUSE {
            bindings = <
&to_layer_0 TAB  &to_layer_0 N7  &to_layer_0 N8  &to_layer_0 N9  &to_layer_0 N0                           &to_layer_0 K_COPY  &kp LEFT           &kp UP            &kp RIGHT          &to_layer_0 K_PASTE
&trans           &to_layer_0 N4  &to_layer_0 N5  &to_layer_0 N6  &to_layer_0 SEMI   &trans      &trans    &to_layer_0 GRAVE   &mkp_exit_AML MB1  &to 5             &mkp_exit_AML MB2  &mkp_exit_AML MB3
&trans           &to_layer_0 N1  &to_layer_0 N2  &to_layer_0 N3  &to_layer_0 MINUS  &trans      &trans    &to_layer_0 SQT     &to_layer_0 EQUAL  &to_layer_0 LBKT  &to_layer_0 RBKT   &to_layer_0 GRAVE
&trans           &trans          &trans          &trans          &trans             &trans      &mkp MB4  &mkp MB5                                                                    &to_layer_0 LSHFT
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        SYMBOL {
            bindings = <
&to_layer_0 LS(Q)  &to_layer_0 LS(N7)    &to_layer_0 LS(N8)    &to_layer_0 LS(N9)  &to_layer_0 LS(N0)                                                       &to_layer_0 BSLH      &to_layer_0 LS(U)      &to_layer_0 LS(I)      &to_layer_0 LS(O)    &to_layer_0 LS(P)
&to_layer_0 LS(A)  &to_layer_0 LS(N4)    &to_layer_0 LS(N5)    &to_layer_0 LS(N6)  &to_layer_0 LS(SEMI)   &to_layer_0 LS(LG(T))      &to_layer_0 LS(MINUS)  &to_layer_0 LS(H)     &to_layer_0 LS(J)      &to_layer_0 LS(K)      &to_layer_0 LS(L)    &none
&to_layer_0 LS(Z)  &to_layer_0 LS(N1)    &to_layer_0 LS(N2)    &to_layer_0 LS(N3)  &to_layer_0 LS(MINUS)  &to_layer_0 LS(APOS)       &to_layer_0 LS(EQUAL)  &to_layer_0 LS(APOS)  &to_layer_0 LS(EQUAL)  &to_layer_0 LS(COMMA)  &to_layer_0 LS(DOT)  &to_layer_0 LS(SEMICOLON)
&to_layer_0 LCTRL  &to_layer_0 LEFT_WIN  &to_layer_0 LEFT_ALT  &trans              &trans                 &trans                     &to_layer_0 BACKSPACE  &to_layer_0 ENTER                                                                        &to_layer_0 LS(SLASH)
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };
    };
};
